{"version":3,"sources":["views/Home.js","components/Navigation.js","themes/default.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Fragment","Component","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","Navigation","AppBar","color","Toolbar","IconButton","src","alt","style","height","Typography","variant","createMuiTheme","typography","h5","fontFamily","caption","palette","primary","main","light","dark","contrastText","secundary","App","ThemeProvider","theme","defaultTheme","CssBaseline","Navigation_Navigation","className","views_Home","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46f1ad1e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport events from '../data/events.json';\n\nclass Home extends Component {\n  render() {\n    return (\n      <></>\n    )\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react'\nimport { AppBar, Slide, useScrollTrigger, Toolbar, Typography, IconButton } from '@material-ui/core';\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n  \n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n    {children}\n    </Slide>\n  );\n}\n\nexport default class Navigation extends Component {\n  render() {\n    return (\n      <HideOnScroll>\n        <AppBar color=\"primary\">\n        <Toolbar>\n          <IconButton>\n            <img src=\"cimalogoWHITE.png\" alt=\"website logo\" style={{height: 40}}></img>\n          </IconButton>\n          <Typography variant=\"h5\" >CIMA</Typography>\n        </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n    )\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport default createMuiTheme({\n  typography: {\n    h5: {fontFamily : \"'Lato','Work Sans'\"},\n    // h6: {fontFamily : \"'Libre Caslon Text','Work Sans'\"},\n    caption: {fontFamily : \"'Bai Jamjuree','Libre Caslon Text','Work Sans'\"},\n  },\n  palette: {\n    primary : { \n      main : \"rgb(138, 31, 77)\", \n      light : \"#000\", \n      dark : \"#000\", \n      contrastText : \"#fff\"\n    },\n    secundary : { \n      main : \"#000\", \n      light : \"#000\", \n      dark : \"#000\", \n      contrastText : \"#000\"\n    }\n  }\n})\n\n","import React from 'react';\nimport './App.css';\nimport Home from './views/Home';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Navigation from './components/Navigation';\nimport { defaultTheme } from './themes';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <CssBaseline/>\n      <Navigation/>\n      <div className=\"container\">\n        <Home/>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}